services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 10


  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 10


  retriever:
    build:
      context: .
      dockerfile: services/retriever/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    env_file:
      - ./env/.env
    restart: always


  preprocessor:
    build:
      context: .
      dockerfile: services/preprocessor/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./env/.env
    restart: always


  enricher:
    build:
      context: .
      dockerfile: services/enricher/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./env/.env
    volumes:
      - ./data/weapons.txt:/app/weapons.txt
    restart: always


  persister:
    build:
      context: .
      dockerfile: services/persister/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    env_file:
      - ./env/.env
    restart: always


  dataretrieval:
    build:
      context: .
      dockerfile: services/dataretrieval/Dockerfile
    depends_on:
      mongo:
        condition: service_started
    ports:
      - "8000:8000"
    env_file:
      - ./env/.env
    restart: always


volumes:
  mongo_data: